version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
    REPO_NAME: $REPO_NAME
    APP_NAME: $APP_NAME
    K8S_NAMESPACE: $K8S_NAMESPACE
    K8S_CLUSTER_NAME: $K8S_CLUSTER_NAME
    ACCOUNT_ID: $ACCOUNT_ID
    ECR_REPO_URI: $ECR_REPO_URI

phases:
  pre_build:
    commands:
      - 'echo "=== Pre-build 단계 시작 ==="'
      - 'echo "현재 디렉토리: $(pwd)"'
      - 'echo "AWS 리전: $AWS_DEFAULT_REGION"'
      - 'echo "계정 ID: $ACCOUNT_ID"'
      - 'echo "ECR 로그인 중..."'
      - 'aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin "$ECR_REPO_URI"'
      - 'echo "이미지 태그 생성 중..."'
      - 'IMAGE_TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)"'
      - 'IMAGE_URI="$ECR_REPO_URI:$IMAGE_TAG"'
      - 'IMAGE_URI_LATEST="$ECR_REPO_URI:latest"'
      - 'echo "IMAGE_URI=$IMAGE_URI"'
      - 'echo "IMAGE_URI_LATEST=$IMAGE_URI_LATEST"'

  build:
    commands:
      - 'echo "=== Build 단계 시작 ==="'
      - 'echo "Docker 이미지 빌드 중..."'
      - 'docker build -t "$IMAGE_URI" -t "$IMAGE_URI_LATEST" .'
      - 'echo "빌드된 이미지 확인..."'
      - 'docker images'

  post_build:
    commands:
      - 'echo "=== Post-build 단계 시작 ==="'
      - 'echo "Docker 이미지를 ECR에 푸시 중..."'
      - 'docker push "$IMAGE_URI"'
      - 'docker push "$IMAGE_URI_LATEST"'
      - 'echo "imagedefinitions.json 생성 중..."'
      - 'echo "[{\"name\":\"$APP_NAME\",\"imageUri\":\"$IMAGE_URI\"}]" > imagedefinitions.json'
      - 'echo "imagedefinitions.json 내용:"'
      - 'cat imagedefinitions.json'

      # EKS 배포 단계
      - 'echo "EKS 클러스터 연결 설정 중..."'
      - 'aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name "$K8S_CLUSTER_NAME"'
      - 'echo "kubectl 버전 확인..."'
      - 'kubectl version --client'
      - 'echo "EKS 클러스터 노드 상태 확인..."'
      - 'kubectl get nodes -o wide'
      - 'kubectl get nodes --show-labels'
      - 'echo "클러스터 정보 확인..."'
      - 'kubectl cluster-info'
      - 'echo "네임스페이스 확인/생성 중..."'
      - 'kubectl create namespace "$K8S_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -'
      - 'echo "Helm 설치 확인..."'
      - 'helm version || (echo "Helm 설치 중..." && curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash)'
      - 'echo "External Secrets Operator 설치 중..."'
      - 'helm repo add external-secrets https://charts.external-secrets.io'
      - 'helm repo update'
      - 'helm upgrade --install external-secrets external-secrets/external-secrets --namespace external-secrets-system --create-namespace --set webhook.port=9443'
      - 'echo "External Secrets Operator 설치 완료 대기..."'
      - 'sleep 60'
      - 'kubectl get pods -n external-secrets-system'
      - 'echo "CRD 설치 확인 및 대기..."'
      - 'kubectl get crd | grep external-secrets || echo "CRD 설치 중..."'
      - 'kubectl wait --for=condition=established --timeout=300s crd/secretstores.external-secrets.io'
      - 'kubectl wait --for=condition=established --timeout=300s crd/externalsecrets.external-secrets.io'
      - 'echo "External Secrets Operator Ready 상태 확인..."'
      - 'kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=external-secrets -n external-secrets-system --timeout=300s'
      - 'echo "CRD 최종 확인..."'
      - 'kubectl get crd | grep external-secrets'
      - 'echo "External Secrets 배포 중..."'
      - 'kubectl apply -f k8s/external-secrets.yaml'
      - 'echo "External Secrets 배포 완료 대기..."'
      - 'sleep 30'
      - 'kubectl get secrets -n "$K8S_NAMESPACE"'
      - 'echo "Kubernetes 매니페스트 업데이트..."'
      - 'sed -i "s|$ECR_REPO_URI:latest|$IMAGE_URI|g" k8s/deployment.yaml'
      - 'echo "업데이트된 deployment.yaml 확인..."'
      - 'grep -A 5 -B 5 "image:" k8s/deployment.yaml'
      - 'echo "=== 동적 노드 상태 확인 및 배포 설정 ==="'
      - 'kubectl get nodes -o wide'
      - 'echo "모든 노드에 라벨 추가 (Ready/NotReady 무관)..."'
      - 'for node in $(kubectl get nodes -o jsonpath="{.items[*].metadata.name}"); do echo "노드 $node 에 라벨 추가"; kubectl label node $node ready-for-deployment=true --overwrite; done'
      - 'echo "deployment.yaml에 NodeSelector + Tolerations 추가..."'
      - 'sed -i "/serviceAccountName: comment-service-sa/a\\      nodeSelector:\\n        ready-for-deployment: \"true\"\\n      tolerations:\\n      - key: node.kubernetes.io/not-ready\\n        operator: Exists\\n        effect: NoSchedule\\n      - key: node.kubernetes.io/unreachable\\n        operator: Exists\\n        effect: NoSchedule" k8s/deployment.yaml'
      - 'echo "수정된 deployment.yaml 확인..."'
      - 'grep -A 10 "nodeSelector:" k8s/deployment.yaml'
      - 'echo "EKS에 배포 중..."'
      - 'kubectl apply -f k8s/deployment.yaml'
      - 'echo "배포 상태 확인 중..."'
      - 'kubectl get deployments -n "$K8S_NAMESPACE"'
      - 'kubectl get pods -n "$K8S_NAMESPACE"'
      - 'kubectl get services -n "$K8S_NAMESPACE"'
      - 'echo "=== 디버깅 정보 ==="'
      - 'kubectl get deployment -n kube-system aws-load-balancer-controller -o yaml |grep "floral-dubstep-gopher"'
      - 'kubectl describe deployment comment-service-deployment -n "$K8S_NAMESPACE"'
      - 'kubectl get pods -n kube-system | grep metrics-server'
      - 'kubectl get apiservice | grep metrics'
      - 'kubectl get events -n "$K8S_NAMESPACE" --sort-by=.metadata.creationTimestamp'
      - 'kubectl get replicasets -n "$K8S_NAMESPACE"'
      - 'echo "배포 완료 대기..."'
      - 'kubectl rollout status deployment/"$APP_NAME"-deployment -n "$K8S_NAMESPACE" --timeout=300s'
      - 'echo "=== 최종 배포 상태 ==="'
      - 'kubectl get all -n "$K8S_NAMESPACE"'
      - 'echo "=== 노드 상태 최종 확인 ==="'
      - 'kubectl get nodes -o wide'
      - 'kubectl describe nodes | grep -A 5 "Conditions:"'
      - 'echo "=== 배포 완료 ==="'

artifacts:
  files:
    - imagedefinitions.json
  name: build-output

cache:
  paths:
    - '/root/.cache/pip/**/*'
